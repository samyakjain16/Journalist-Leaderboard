{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red77\green80\blue85;\red246\green247\blue249;\red46\green49\blue51;
\red20\green67\blue174;\red186\green6\blue115;\red162\green0\blue16;\red18\green115\blue126;\red24\green25\blue27;
\red97\green3\blue173;}
{\*\expandedcolortbl;;\cssrgb\c37255\c38824\c40784;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c9412\c35294\c73725;\cssrgb\c78824\c15294\c52549;\cssrgb\c70196\c7843\c7059;\cssrgb\c3529\c52157\c56863;\cssrgb\c12549\c12941\c14118;
\cssrgb\c46275\c15294\c73333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Constants\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 SHEETS\cf4 \strokec4  = \{\cb1 \
\cb3   \cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 : \cf7 \strokec7 'Daily Entries'\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 JOURNALISTS\cf4 \strokec4 : \cf7 \strokec7 'Journalists Master'\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 CONFIG\cf4 \strokec4 : \cf7 \strokec7 'Configuration'\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 NEW_DATA\cf4 \strokec4 : \cf7 \strokec7 'New Data'\cf4 \cb1 \strokec4 \
\cb3 \};\cb1 \
\
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 COLUMNS\cf4 \strokec4  = \{\cb1 \
\cb3   \cf6 \strokec6 SHARED\cf4 \strokec4 : \{\cb1 \
\cb3     \cf6 \strokec6 DATE\cf4 \strokec4 : \cf8 \strokec8 0\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 ID\cf4 \strokec4 : \cf8 \strokec8 1\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 NAME\cf4 \strokec4 : \cf8 \strokec8 2\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 PUBLICATION\cf4 \strokec4 : \cf8 \strokec8 3\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 FRONT_PAGE\cf4 \strokec4 : \cf8 \strokec8 4\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 EXCLUSIVE\cf4 \strokec4 : \cf8 \strokec8 5\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 STANDARD\cf4 \strokec4 : \cf8 \strokec8 6\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 DAILY_POINTS\cf4 \strokec4 : \cf8 \strokec8 7\cf4 \cb1 \strokec4 \
\cb3   \},\cb1 \
\cb3   \cf6 \strokec6 JOURNALISTS\cf4 \strokec4 : \{\cb1 \
\cb3     \cf6 \strokec6 ID\cf4 \strokec4 : \cf8 \strokec8 0\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 NAME\cf4 \strokec4 : \cf8 \strokec8 1\cf4 \strokec4 ,\cb1 \
\cb3     \cf6 \strokec6 OVERALL_POINTS\cf4 \strokec4 : \cf8 \strokec8 2\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3 \};\cb1 \
\
\cf2 \cb3 \strokec2 // Point calculation system\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 class\cf4 \strokec4  \cf6 \strokec6 PointCalculator\cf4 \strokec4  \{\cb1 \
\cb3   \cf5 \strokec5 constructor\cf4 \strokec4 (\cf9 \strokec9 configSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 pointValues\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 getPointValues\cf4 \strokec4 (\cf9 \strokec9 configSheet\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 getPointValues\cf4 \strokec4 (\cf9 \strokec9 configSheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 configData\cf4 \strokec4  = \cf9 \strokec9 configSheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 config\cf4 \strokec4  = \{\};\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 configData\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  [\cf9 \strokec9 pointType\cf4 \strokec4 , \cf9 \strokec9 value\cf4 \strokec4 ] = \cf9 \strokec9 configData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 pointType\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 config\cf4 \strokec4 [\cf9 \strokec9 pointType\cf4 \strokec4 .\cf9 \strokec9 toLowerCase\cf4 \strokec4 ().\cf9 \strokec9 replace\cf4 \strokec4 (\cf7 \strokec7 ' '\cf4 \strokec4 , \cf7 \strokec7 '_'\cf4 \strokec4 )] = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 value\cf4 \strokec4 ) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 config\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 calculatePoints\cf4 \strokec4 (\cf9 \strokec9 frontPage\cf4 \strokec4 , \cf9 \strokec9 exclusive\cf4 \strokec4 , \cf9 \strokec9 standard\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  (\cb1 \
\cb3       (\cf9 \strokec9 frontPage\cf4 \strokec4  * \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 pointValues\cf4 \strokec4 .\cf9 \strokec9 front_page\cf4 \strokec4 ) +\cb1 \
\cb3       (\cf9 \strokec9 exclusive\cf4 \strokec4  * \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 pointValues\cf4 \strokec4 .\cf9 \strokec9 exclusive\cf4 \strokec4 ) +\cb1 \
\cb3       (\cf9 \strokec9 standard\cf4 \strokec4  * \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 pointValues\cf4 \strokec4 .\cf9 \strokec9 standard\cf4 \strokec4 )\cb1 \
\cb3     );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Utility Functions\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 generateJournalistId\cf4 \strokec4 (\cf9 \strokec9 name\cf4 \strokec4 , \cf9 \strokec9 publication\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 name\cf4 \strokec4  || !\cf9 \strokec9 publication\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  \cf7 \strokec7 ''\cf4 \strokec4 ;\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  (\cf9 \strokec9 name\cf4 \strokec4  + \cf7 \strokec7 '_'\cf4 \strokec4  + \cf9 \strokec9 publication\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 toLowerCase\cf4 \strokec4 ()\cb1 \
\cb3     .\cf9 \strokec9 replace\cf4 \strokec4 (\cf10 \strokec10 /[^a-z0-9]/\cf5 \strokec5 g\cf4 \strokec4 , \cf7 \strokec7 ''\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 replace\cf4 \strokec4 (\cf10 \strokec10 /\\s+/\cf5 \strokec5 g\cf4 \strokec4 , \cf7 \strokec7 ''\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 formatDate\cf4 \strokec4 (\cf9 \strokec9 date\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf6 \strokec6 Utilities\cf4 \strokec4 .\cf9 \strokec9 formatDate\cf4 \strokec4 (\cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 (\cf9 \strokec9 date\cf4 \strokec4 ), \cf6 \strokec6 Session\cf4 \strokec4 .\cf9 \strokec9 getScriptTimeZone\cf4 \strokec4 (), \cf7 \strokec7 'yyyy-MM-dd'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Calculate total points for a journalist\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 calculateTotalPoints\cf4 \strokec4 (\cf9 \strokec9 journalistId\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailySheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyData\cf4 \strokec4  = \cf9 \strokec9 dailySheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 totalPoints\cf4 \strokec4  = \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 dailyData\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 dailyData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 journalistId\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 totalPoints\cf4 \strokec4  += \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 dailyData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DAILY_POINTS\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 totalPoints\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Master sheet management\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 updateMasterSheetEntry\cf4 \strokec4 (\cf9 \strokec9 id\cf4 \strokec4 , \cf9 \strokec9 name\cf4 \strokec4 , \cf9 \strokec9 isNewEntry\cf4 \strokec4  = \cf5 \strokec5 false\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 id\cf4 \strokec4  || !\cf9 \strokec9 name\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 masterSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 masterData\cf4 \strokec4  = \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 totalPoints\cf4 \strokec4  = \cf9 \strokec9 calculateTotalPoints\cf4 \strokec4 (\cf9 \strokec9 id\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Try to find existing entry\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 masterData\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 masterData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 id\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf2 \strokec2 // Update existing entry\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 i\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 NAME\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 setValue\cf4 \strokec4 (\cf9 \strokec9 name\cf4 \strokec4 );\cb1 \
\cb3       \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 i\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 OVERALL_POINTS\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 setValue\cf4 \strokec4 (\cf9 \strokec9 totalPoints\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4 ; \cf2 \strokec2 // Exit after updating\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Only add new row if it's a new entry\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 isNewEntry\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 appendRow\cf4 \strokec4 ([\cf9 \strokec9 id\cf4 \strokec4 , \cf9 \strokec9 name\cf4 \strokec4 , \cf9 \strokec9 totalPoints\cf4 \strokec4 ]);\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Handle row deletion in Daily Entries\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 handleDailyEntriesDelete\cf4 \strokec4 (\cf9 \strokec9 deletedId\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 deletedId\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 masterSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 masterData\cf4 \strokec4  = \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Check if ID still exists in Daily Entries\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailySheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyData\cf4 \strokec4  = \cf9 \strokec9 dailySheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 idStillExists\cf4 \strokec4  = \cf9 \strokec9 dailyData\cf4 \strokec4 .\cf9 \strokec9 some\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4  => \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 deletedId\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // If ID no longer exists in Daily Entries, remove from Master sheet\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 idStillExists\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 masterData\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 masterData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 deletedId\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 deleteRow\cf4 \strokec4 (\cf9 \strokec9 i\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\
\cf2 \cb3 \strokec2 // PDF Data Processor\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 class\cf4 \strokec4  \cf6 \strokec6 PdfDataProcessor\cf4 \strokec4  \{\cb1 \
\cb3   \cf5 \strokec5 constructor\cf4 \strokec4 (\cf9 \strokec9 spreadsheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 ss\cf4 \strokec4  = \cf9 \strokec9 spreadsheet\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 pointCalculator\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 PointCalculator\cf4 \strokec4 (\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 CONFIG\cf4 \strokec4 )\cb1 \
\cb3     );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 processPdfData\cf4 \strokec4 (\cf9 \strokec9 pdfData\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 newDataSheet\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 getOrCreateNewDataSheet\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 uploadedDate\cf4 \strokec4  = \cf9 \strokec9 formatDate\cf4 \strokec4 (\cf9 \strokec9 pdfData\cf4 \strokec4 .\cf9 \strokec9 uploadedAt\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 newRows\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 prepareNewRows\cf4 \strokec4 (\cf9 \strokec9 pdfData\cf4 \strokec4 , \cf9 \strokec9 uploadedDate\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 newRows\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4  > \cf8 \strokec8 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 addRowsToSheet\cf4 \strokec4 (\cf9 \strokec9 newRows\cf4 \strokec4 , \cf9 \strokec9 newDataSheet\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Add only these new rows to Daily Entries\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 // this.addToDailyEntries(newRows);\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 newRows\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 addToDailyEntries\cf4 \strokec4 (\cf9 \strokec9 newRows\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 "Starting to add rows to Daily Entries"\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyEntriesSheet\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 lastRow\cf4 \strokec4  = \cf9 \strokec9 dailyEntriesSheet\cf4 \strokec4 .\cf9 \strokec9 getLastRow\cf4 \strokec4 ();\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 "Last row in Daily Entries:"\cf4 \strokec4 , \cf9 \strokec9 lastRow\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Prepare rows for Daily Entries (without Daily Points)\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowsForDaily\cf4 \strokec4  = \cf9 \strokec9 newRows\cf4 \strokec4 .\cf9 \strokec9 map\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4  => [\cb1 \
\cb3         \cf9 \strokec9 row\cf4 \strokec4 [\cf8 \strokec8 0\cf4 \strokec4 ],  \cf2 \strokec2 // Date\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 row\cf4 \strokec4 [\cf8 \strokec8 1\cf4 \strokec4 ],  \cf2 \strokec2 // ID\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 row\cf4 \strokec4 [\cf8 \strokec8 2\cf4 \strokec4 ],  \cf2 \strokec2 // Name\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 row\cf4 \strokec4 [\cf8 \strokec8 3\cf4 \strokec4 ],  \cf2 \strokec2 // Publication\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 row\cf4 \strokec4 [\cf8 \strokec8 4\cf4 \strokec4 ],  \cf2 \strokec2 // Front Page\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 row\cf4 \strokec4 [\cf8 \strokec8 5\cf4 \strokec4 ],  \cf2 \strokec2 // Exclusive\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 row\cf4 \strokec4 [\cf8 \strokec8 6\cf4 \strokec4 ]   \cf2 \strokec2 // Standard\cf4 \cb1 \strokec4 \
\cb3       ]);\cb1 \
\
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 "Rows prepared for Daily Entries:"\cf4 \strokec4 , \cf9 \strokec9 rowsForDaily\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Get range and set values\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 range\cf4 \strokec4  = \cf9 \strokec9 dailyEntriesSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 lastRow\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf9 \strokec9 rowsForDaily\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 , \cf8 \strokec8 7\cf4 \strokec4 );\cb1 \
\cb3       \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 setValues\cf4 \strokec4 (\cf9 \strokec9 rowsForDaily\cf4 \strokec4 );\cb1 \
\
\cb3       \cf2 \strokec2 // Optional: Highlight new rows\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 setBackground\cf4 \strokec4 (\cf7 \strokec7 '#e6ffe6'\cf4 \strokec4 );\cb1 \
\
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `Successfully added \cf4 \strokec4 $\{\cf9 \strokec9 rowsForDaily\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 \}\cf7 \strokec7  rows to Daily Entries`\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ().\cf9 \strokec9 toast\cf4 \strokec4 (\cf7 \strokec7 `Added \cf4 \strokec4 $\{\cf9 \strokec9 rowsForDaily\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 \}\cf7 \strokec7  rows to Daily Entries`\cf4 \strokec4 );\cb1 \
\
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf7 \strokec7 "Error in addToDailyEntries:"\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ().\cf9 \strokec9 toast\cf4 \strokec4 (\cf7 \strokec7 'Error: '\cf4 \strokec4  + \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 getOrCreateNewDataSheet\cf4 \strokec4 () \{\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 NEW_DATA\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 sheet\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 sheet\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 insertSheet\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 NEW_DATA\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyEntriesSheet\cf4 \strokec4  = \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 headers\cf4 \strokec4  = \cf9 \strokec9 dailyEntriesSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 8\cf4 \strokec4 ).\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3       \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 8\cf4 \strokec4 ).\cf9 \strokec9 setValues\cf4 \strokec4 (\cf9 \strokec9 headers\cf4 \strokec4 );\cb1 \
\cb3       \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 setFrozenRows\cf4 \strokec4 (\cf8 \strokec8 1\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 prepareNewRows\cf4 \strokec4 (\cf9 \strokec9 pdfData\cf4 \strokec4 , \cf9 \strokec9 uploadedDate\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 newRows\cf4 \strokec4  = [];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 journalistNames\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Set\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 Object\cf4 \strokec4 .\cf9 \strokec9 entries\cf4 \strokec4 (\cf9 \strokec9 pdfData\cf4 \strokec4 .\cf9 \strokec9 results\cf4 \strokec4 .\cf9 \strokec9 journalist_stats\cf4 \strokec4 ).\cf9 \strokec9 forEach\cf4 \strokec4 (([\cf9 \strokec9 name\cf4 \strokec4 , \cf9 \strokec9 stats\cf4 \strokec4 ]) => \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 journalistNames\cf4 \strokec4 .\cf9 \strokec9 has\cf4 \strokec4 (\cf9 \strokec9 name\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf7 \strokec7 `Duplicate journalist found: \cf4 \strokec4 $\{\cf9 \strokec9 name\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3       \}\cb1 \
\cb3       \cf9 \strokec9 journalistNames\cf4 \strokec4 .\cf9 \strokec9 add\cf4 \strokec4 (\cf9 \strokec9 name\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 exclusive\cf4 \strokec4  = \cf9 \strokec9 stats\cf4 \strokec4 .\cf9 \strokec9 exclusive\cf4 \strokec4  || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 standard\cf4 \strokec4  = \cf9 \strokec9 stats\cf4 \strokec4 .\cf9 \strokec9 standard\cf4 \strokec4  || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 id\cf4 \strokec4  = \cf9 \strokec9 generateJournalistId\cf4 \strokec4 (\cf9 \strokec9 name\cf4 \strokec4 , \cf7 \strokec7 'AFR'\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = [\cb1 \
\cb3         \cf9 \strokec9 uploadedDate\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 id\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 name\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 'AFR'\cf4 \strokec4 ,\cb1 \
\cb3         \cf8 \strokec8 0\cf4 \strokec4 , \cf2 \strokec2 // Front Page\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 exclusive\cf4 \strokec4 ,\cb1 \
\cb3         \cf9 \strokec9 standard\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 pointCalculator\cf4 \strokec4 .\cf9 \strokec9 calculatePoints\cf4 \strokec4 (\cf8 \strokec8 0\cf4 \strokec4 , \cf9 \strokec9 exclusive\cf4 \strokec4 , \cf9 \strokec9 standard\cf4 \strokec4 )\cb1 \
\cb3       ];\cb1 \
\cb3       \cb1 \
\cb3       \cf9 \strokec9 newRows\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Update master sheet for new entries\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 updateMasterSheetEntry\cf4 \strokec4 (\cf9 \strokec9 id\cf4 \strokec4 , \cf9 \strokec9 name\cf4 \strokec4 , \cf5 \strokec5 true\cf4 \strokec4 );\cb1 \
\cb3     \});\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 newRows\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 addRowsToSheet\cf4 \strokec4 (\cf9 \strokec9 newRows\cf4 \strokec4 , \cf9 \strokec9 sheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 lastRow\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getLastRow\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 range\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 lastRow\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf9 \strokec9 newRows\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 , \cf8 \strokec8 8\cf4 \strokec4 );\cb1 \
\cb3     \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 setValues\cf4 \strokec4 (\cf9 \strokec9 newRows\cf4 \strokec4 );\cb1 \
\cb3     \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 setBackground\cf4 \strokec4 (\cf7 \strokec7 '#e6ffe6'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 validateNewEntries\cf4 \strokec4 (\cf9 \strokec9 range\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 validateNewEntries\cf4 \strokec4 (\cf9 \strokec9 range\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 values\cf4 \strokec4  = \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3     \cf9 \strokec9 values\cf4 \strokec4 .\cf9 \strokec9 forEach\cf4 \strokec4 ((\cf9 \strokec9 row\cf4 \strokec4 , \cf9 \strokec9 rowIndex\cf4 \strokec4 ) => \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 hasIssue\cf4 \strokec4  = !\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 NAME\cf4 \strokec4 ] || \cb1 \
\cb3                       !\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] || \cb1 \
\cb3                       \cf9 \strokec9 isNaN\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 EXCLUSIVE\cf4 \strokec4 ]) ||\cb1 \
\cb3                       \cf9 \strokec9 isNaN\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 STANDARD\cf4 \strokec4 ]) ||\cb1 \
\cb3                       \cf9 \strokec9 isNaN\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DAILY_POINTS\cf4 \strokec4 ]);\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 hasIssue\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 offset\cf4 \strokec4 (\cf9 \strokec9 rowIndex\cf4 \strokec4 , \cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 8\cf4 \strokec4 ).\cf9 \strokec9 setBackground\cf4 \strokec4 (\cf7 \strokec7 '#ffe6e6'\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \});\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Firebase sync class\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 class\cf4 \strokec4  \cf6 \strokec6 FirebaseSync\cf4 \strokec4  \{\cb1 \
\cb3   \cf5 \strokec5 constructor\cf4 \strokec4 () \{\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 firebaseConfig\cf4 \strokec4  = \{\cb1 \
\cb3       \cf9 \strokec9 databaseURL\cf4 \strokec4 : \cf7 \strokec7 "https://journalist-leaderboard-default-rtdb.asia-southeast1.firebasedatabase.app"\cf4 \cb1 \strokec4 \
\cb3     \};\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 firebase\cf4 \strokec4  = \cf6 \strokec6 FirebaseApp\cf4 \strokec4 .\cf9 \strokec9 getDatabaseByUrl\cf4 \strokec4 (\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 firebaseConfig\cf4 \strokec4 .\cf9 \strokec9 databaseURL\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 syncData\cf4 \strokec4 () \{\cb1 \
\cb3     \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \{\cb1 \
\cb3         \cf9 \strokec9 configuration\cf4 \strokec4 : \{\cb1 \
\cb3           \cf9 \strokec9 points\cf4 \strokec4 : \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 getConfigData\cf4 \strokec4 (\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 CONFIG\cf4 \strokec4 ))\cb1 \
\cb3         \},\cb1 \
\cb3         \cf9 \strokec9 daily_scores\cf4 \strokec4 : \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 getDailyEntriesData\cf4 \strokec4 (\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 )),\cb1 \
\cb3         \cf9 \strokec9 journalists\cf4 \strokec4 : \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 getJournalistsData\cf4 \strokec4 (\cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 ))\cb1 \
\cb3       \};\cb1 \
\
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 validateData\cf4 \strokec4 (\cf9 \strokec9 data\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf5 \strokec5 throw\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Error\cf4 \strokec4 (\cf7 \strokec7 'Invalid data structure'\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf5 \strokec5 this\cf4 \strokec4 .\cf9 \strokec9 firebase\cf4 \strokec4 .\cf9 \strokec9 setData\cf4 \strokec4 (\cf7 \strokec7 '/'\cf4 \strokec4 , \cf9 \strokec9 data\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ().\cf9 \strokec9 toast\cf4 \strokec4 (\cf7 \strokec7 'Successfully synced to Firebase!'\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3     \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf7 \strokec7 'Sync error:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3       \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ().\cf9 \strokec9 toast\cf4 \strokec4 (\cf7 \strokec7 `Error syncing: \cf4 \strokec4 $\{\cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4 , \cf7 \strokec7 'Error'\cf4 \strokec4 , \cf8 \strokec8 30\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 getConfigData\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 PointCalculator\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 ).\cf9 \strokec9 pointValues\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 getDailyEntriesData\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyScores\cf4 \strokec4  = \{\};\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DATE\cf4 \strokec4 ]) \cf5 \strokec5 continue\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 date\cf4 \strokec4  = \cf9 \strokec9 formatDate\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DATE\cf4 \strokec4 ]);\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 dailyScores\cf4 \strokec4 [\cf9 \strokec9 date\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf9 \strokec9 dailyScores\cf4 \strokec4 [\cf9 \strokec9 date\cf4 \strokec4 ] = \{\cb1 \
\cb3           \cf9 \strokec9 journalist_info\cf4 \strokec4 : []\cb1 \
\cb3         \};\cb1 \
\cb3       \}\cb1 \
\
\cb3       \cf9 \strokec9 dailyScores\cf4 \strokec4 [\cf9 \strokec9 date\cf4 \strokec4 ].\cf9 \strokec9 journalist_info\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\{\cb1 \
\cb3         \cf9 \strokec9 id\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 name\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 NAME\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 publication\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 PUBLICATION\cf4 \strokec4 ],\cb1 \
\cb3         \cf9 \strokec9 metrics\cf4 \strokec4 : \{\cb1 \
\cb3           \cf9 \strokec9 front_page\cf4 \strokec4 : \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 FRONT_PAGE\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 exclusive\cf4 \strokec4 : \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 EXCLUSIVE\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 standard\cf4 \strokec4 : \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 STANDARD\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \cb1 \strokec4 \
\cb3         \},\cb1 \
\cb3         \cf9 \strokec9 daily_points\cf4 \strokec4 : \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DAILY_POINTS\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \cb1 \strokec4 \
\cb3       \});\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 dailyScores\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 getJournalistsData\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 journalists\cf4 \strokec4  = \{\};\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  [\cf9 \strokec9 id\cf4 \strokec4 , \cf9 \strokec9 name\cf4 \strokec4 , \cf9 \strokec9 overallPoints\cf4 \strokec4 ] = \cf9 \strokec9 data\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 id\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 journalists\cf4 \strokec4 [\cf9 \strokec9 id\cf4 \strokec4 ] = \{\cb1 \
\cb3           \cf9 \strokec9 name\cf4 \strokec4 : \cf9 \strokec9 name\cf4 \strokec4 ,\cb1 \
\cb3           \cf9 \strokec9 overall_points\cf4 \strokec4 : \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 overallPoints\cf4 \strokec4 ) || \cf8 \strokec8 0\cf4 \cb1 \strokec4 \
\cb3         \};\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 journalists\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf9 \strokec9 validateData\cf4 \strokec4 (\cf9 \strokec9 data\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 configuration\cf4 \strokec4 ?.\cf9 \strokec9 points\cf4 \strokec4  && \cb1 \
\cb3            \cf5 \strokec5 typeof\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 daily_scores\cf4 \strokec4  === \cf7 \strokec7 'object'\cf4 \strokec4  && \cb1 \
\cb3            \cf5 \strokec5 typeof\cf4 \strokec4  \cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 journalists\cf4 \strokec4  === \cf7 \strokec7 'object'\cf4 \strokec4  && \cb1 \
\cb3            \cf6 \strokec6 Object\cf4 \strokec4 .\cf9 \strokec9 keys\cf4 \strokec4 (\cf9 \strokec9 data\cf4 \strokec4 .\cf9 \strokec9 journalists\cf4 \strokec4 ).\cf9 \strokec9 length\cf4 \strokec4  > \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // New function to handle ID erasure\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 handleIdErasure\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 , \cf9 \strokec9 row\cf4 \strokec4 , \cf9 \strokec9 erasedId\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 erasedId\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 masterSheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf2 \strokec2 // Get the daily points value before deleting the row\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowRange\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 1\cf4 \strokec4 , \cf8 \strokec8 8\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowValues\cf4 \strokec4  = \cf9 \strokec9 rowRange\cf4 \strokec4 .\cf9 \strokec9 getValues\cf4 \strokec4 ()[\cf8 \strokec8 0\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyPointsToDeduct\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 rowValues\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DAILY_POINTS\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Delete the row from Daily Entries\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 deleteRow\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Update Master sheet\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 masterData\cf4 \strokec4  = \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Check if this ID exists in other rows of Daily Entries\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailySheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyData\cf4 \strokec4  = \cf9 \strokec9 dailySheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 remainingEntries\cf4 \strokec4  = \cf9 \strokec9 dailyData\cf4 \strokec4 .\cf9 \strokec9 filter\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4  => \cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 erasedId\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 remainingEntries\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4  > \cf8 \strokec8 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf2 \strokec2 // ID still exists in other rows, just update the overall points\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 masterData\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 masterData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 erasedId\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 currentOverallPoints\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 masterData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 OVERALL_POINTS\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3           \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 newOverallPoints\cf4 \strokec4  = \cf6 \strokec6 Math\cf4 \strokec4 .\cf9 \strokec9 max\cf4 \strokec4 (\cf8 \strokec8 0\cf4 \strokec4 , \cf9 \strokec9 currentOverallPoints\cf4 \strokec4  - \cf9 \strokec9 dailyPointsToDeduct\cf4 \strokec4 );\cb1 \
\cb3           \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 i\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 OVERALL_POINTS\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 setValue\cf4 \strokec4 (\cf9 \strokec9 newOverallPoints\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb3       \cf2 \strokec2 // No more entries with this ID, remove from Master sheet\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 masterData\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 masterData\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ][\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 JOURNALISTS\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 erasedId\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf9 \strokec9 masterSheet\cf4 \strokec4 .\cf9 \strokec9 deleteRow\cf4 \strokec4 (\cf9 \strokec9 i\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ().\cf9 \strokec9 toast\cf4 \strokec4 (\cf7 \strokec7 'Row removed and points updated successfully'\cf4 \strokec4 );\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 logError\cf4 \strokec4 (\cf7 \strokec7 'handleIdErasure'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 , \{ \cf9 \strokec9 erasedId\cf4 \strokec4 , \cf9 \strokec9 row\cf4 \strokec4  \});\cb1 \
\cb3     \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ().\cf9 \strokec9 toast\cf4 \strokec4 (\cf7 \strokec7 'Error handling ID erasure: '\cf4 \strokec4  + \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 , \cf7 \strokec7 'Error'\cf4 \strokec4 , \cf8 \strokec8 30\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Helper function to calculate remaining total points for an ID\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 calculateRemainingPoints\cf4 \strokec4 (\cf9 \strokec9 journalistId\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailySheet\cf4 \strokec4  = \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 );\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyData\cf4 \strokec4  = \cf9 \strokec9 dailySheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ().\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 dailyData\cf4 \strokec4 .\cf9 \strokec9 reduce\cf4 \strokec4 ((\cf9 \strokec9 total\cf4 \strokec4 , \cf9 \strokec9 row\cf4 \strokec4 ) => \{\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ] === \cf9 \strokec9 journalistId\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 total\cf4 \strokec4  + (\cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DAILY_POINTS\cf4 \strokec4 ]) || \cf8 \strokec8 0\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 total\cf4 \strokec4 ;\cb1 \
\cb3   \}, \cf8 \strokec8 0\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 onEdit\cf4 \strokec4 (\cf9 \strokec9 e\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 range\cf4 \strokec4  = \cf9 \strokec9 e\cf4 \strokec4 .\cf9 \strokec9 range\cf4 \strokec4 ;\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getSheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf2 \strokec2 /*\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   if (sheet.getName() === SHEETS.NEW_DATA) \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     const lastRow = sheet.getLastRow();\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     const newRows = sheet.getRange(lastRow, 1, 1, 7).getValues(); // Get the newly added row\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     console.log("New row detected in New Data sheet:", newRows);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     try \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       const dailyEntriesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEETS.DAILY_ENTRIES);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       const lastDailyRow = dailyEntriesSheet.getLastRow();\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       // Copy to Daily Entries (without Daily Points column)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       const targetRange = dailyEntriesSheet.getRange(lastDailyRow + 1, 1, 1, 7);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       targetRange.setValues(newRows);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       // Optional: Highlight the new row\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       targetRange.setBackground('#e6ffe6');\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       console.log("Successfully copied new row to Daily Entries");\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     \} catch (error) \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2       console.error("Error copying to Daily Entries:", error);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     \}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   \}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2   */\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Only proceed if edit is in Daily Entries sheet\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getName\cf4 \strokec4 () !== \cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getRow\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 row\cf4 \strokec4  === \cf8 \strokec8 1\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ; \cf2 \strokec2 // Skip header row\cf4 \cb1 \strokec4 \
\
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 column\cf4 \strokec4  = \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getColumn\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 numRows\cf4 \strokec4  = \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getNumRows\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 numCols\cf4 \strokec4  = \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getNumColumns\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Get the point calculator instance\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 pointCalculator\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 PointCalculator\cf4 \strokec4 (\cb1 \
\cb3     \cf9 \strokec9 ss\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 CONFIG\cf4 \strokec4 )\cb1 \
\cb3   );\cb1 \
\
\cb3   \cf2 \strokec2 // Process each affected row (handles both single edit and paste operations)\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 0\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 numRows\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 currentRow\cf4 \strokec4  = \cf9 \strokec9 row\cf4 \strokec4  + \cf9 \strokec9 i\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Case 1: ID is erased\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 column\cf4 \strokec4  === \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 newValue\cf4 \strokec4  = \cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getValue\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 oldValue\cf4 \strokec4  = \cf9 \strokec9 e\cf4 \strokec4 .\cf9 \strokec9 oldValue\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // If ID was erased (new value is empty/null and had an old value)\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  ((!\cf9 \strokec9 newValue\cf4 \strokec4  || \cf9 \strokec9 newValue\cf4 \strokec4  === \cf7 \strokec7 ''\cf4 \strokec4 ) && \cf9 \strokec9 oldValue\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 handleIdErasure\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 , \cf9 \strokec9 currentRow\cf4 \strokec4 , \cf9 \strokec9 oldValue\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 continue\cf4 \strokec4 ; \cf2 \strokec2 // Skip to next row\cf4 \cb1 \strokec4 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 // Case 2: Name or Publication changes (or paste operation)\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 numCols\cf4 \strokec4  > \cf8 \strokec8 1\cf4 \strokec4  || \cf9 \strokec9 column\cf4 \strokec4  === \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 NAME\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4  || \cf9 \strokec9 column\cf4 \strokec4  === \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 PUBLICATION\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 name\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 NAME\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 publication\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 PUBLICATION\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ();\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 name\cf4 \strokec4  && \cf9 \strokec9 publication\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 existingId\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 newId\cf4 \strokec4  = \cf9 \strokec9 generateJournalistId\cf4 \strokec4 (\cf9 \strokec9 name\cf4 \strokec4 , \cf9 \strokec9 publication\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Update ID in Daily Entries\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 setValue\cf4 \strokec4 (\cf9 \strokec9 newId\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Update master sheet - only add new row if ID is new\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 isNewEntry\cf4 \strokec4  = !\cf9 \strokec9 existingId\cf4 \strokec4  || \cf9 \strokec9 existingId\cf4 \strokec4  !== \cf9 \strokec9 newId\cf4 \strokec4 ;\cb1 \
\cb3         \cf9 \strokec9 updateMasterSheetEntry\cf4 \strokec4 (\cf9 \strokec9 newId\cf4 \strokec4 , \cf9 \strokec9 name\cf4 \strokec4 , \cf9 \strokec9 isNewEntry\cf4 \strokec4 );\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // If ID changed, clean up old entry\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 existingId\cf4 \strokec4  && \cf9 \strokec9 existingId\cf4 \strokec4  !== \cf9 \strokec9 newId\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf9 \strokec9 handleDailyEntriesDelete\cf4 \strokec4 (\cf9 \strokec9 existingId\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 // Also calculate points if metrics exist\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 frontPage\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 FRONT_PAGE\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ()) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 exclusive\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 EXCLUSIVE\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ()) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 standard\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 STANDARD\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ()) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyPoints\cf4 \strokec4  = \cf9 \strokec9 pointCalculator\cf4 \strokec4 .\cf9 \strokec9 calculatePoints\cf4 \strokec4 (\cf9 \strokec9 frontPage\cf4 \strokec4 , \cf9 \strokec9 exclusive\cf4 \strokec4 , \cf9 \strokec9 standard\cf4 \strokec4 );\cb1 \
\cb3         \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DAILY_POINTS\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 setValue\cf4 \strokec4 (\cf9 \strokec9 dailyPoints\cf4 \strokec4 );\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Case 3: Metrics changes (Front Page, Exclusive, Standard)\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 column\cf4 \strokec4  === \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 FRONT_PAGE\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4  || \cb1 \
\cb3         \cf9 \strokec9 column\cf4 \strokec4  === \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 EXCLUSIVE\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4  || \cb1 \
\cb3         \cf9 \strokec9 column\cf4 \strokec4  === \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 STANDARD\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ) \{\cb1 \
\cb3       \cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 frontPage\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 FRONT_PAGE\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ()) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 exclusive\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 EXCLUSIVE\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ()) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 standard\cf4 \strokec4  = \cf6 \strokec6 Number\cf4 \strokec4 (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 STANDARD\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ()) || \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Calculate and update daily points\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dailyPoints\cf4 \strokec4  = \cf9 \strokec9 pointCalculator\cf4 \strokec4 .\cf9 \strokec9 calculatePoints\cf4 \strokec4 (\cf9 \strokec9 frontPage\cf4 \strokec4 , \cf9 \strokec9 exclusive\cf4 \strokec4 , \cf9 \strokec9 standard\cf4 \strokec4 );\cb1 \
\cb3       \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 DAILY_POINTS\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 setValue\cf4 \strokec4 (\cf9 \strokec9 dailyPoints\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf2 \strokec2 // Update master sheet points\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 journalistId\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ();\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 journalistId\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf9 \strokec9 updateMasterSheetEntry\cf4 \strokec4 (\cf9 \strokec9 journalistId\cf4 \strokec4 , \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getRange\cf4 \strokec4 (\cf9 \strokec9 currentRow\cf4 \strokec4 , \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 NAME\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ).\cf9 \strokec9 getValue\cf4 \strokec4 ());\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 onDelete\cf4 \strokec4 (\cf9 \strokec9 e\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 e\cf4 \strokec4  || !\cf9 \strokec9 e\cf4 \strokec4 .\cf9 \strokec9 range\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf9 \strokec9 e\cf4 \strokec4 .\cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getSheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getName\cf4 \strokec4 () !== \cf6 \strokec6 SHEETS\cf4 \strokec4 .\cf6 \strokec6 DAILY_ENTRIES\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 deletedValues\cf4 \strokec4  = \cf9 \strokec9 e\cf4 \strokec4 .\cf9 \strokec9 oldValue\cf4 \strokec4 ;\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 deletedValues\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf5 \strokec5 typeof\cf4 \strokec4  \cf9 \strokec9 deletedValues\cf4 \strokec4  === \cf7 \strokec7 'string'\cf4 \strokec4  && \cf9 \strokec9 e\cf4 \strokec4 .\cf9 \strokec9 range\cf4 \strokec4 .\cf9 \strokec9 getColumn\cf4 \strokec4 () === \cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4  + \cf8 \strokec8 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 handleDailyEntriesDelete\cf4 \strokec4 (\cf9 \strokec9 deletedValues\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf6 \strokec6 Array\cf4 \strokec4 .\cf9 \strokec9 isArray\cf4 \strokec4 (\cf9 \strokec9 deletedValues\cf4 \strokec4 )) \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 deletedId\cf4 \strokec4  = \cf9 \strokec9 deletedValues\cf4 \strokec4 [\cf6 \strokec6 COLUMNS\cf4 \strokec4 .\cf6 \strokec6 SHARED\cf4 \strokec4 .\cf6 \strokec6 ID\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 deletedId\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf9 \strokec9 handleDailyEntriesDelete\cf4 \strokec4 (\cf9 \strokec9 deletedId\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Menu and initialization\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 onOpen\cf4 \strokec4 () \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ui\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getUi\cf4 \strokec4 ();\cb1 \
\cb3   \cf9 \strokec9 ui\cf4 \strokec4 .\cf9 \strokec9 createMenu\cf4 \strokec4 (\cf7 \strokec7 'Firebase Sync'\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 addItem\cf4 \strokec4 (\cf7 \strokec7 'Sync to Firebase'\cf4 \strokec4 , \cf7 \strokec7 'syncToFirebase'\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 addSeparator\cf4 \strokec4 ()\cb1 \
\cb3     .\cf9 \strokec9 addItem\cf4 \strokec4 (\cf7 \strokec7 'Setup Triggers'\cf4 \strokec4 , \cf7 \strokec7 'createSpreadsheetTriggers'\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 addToUi\cf4 \strokec4 ();\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Setup triggers\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 createSpreadsheetTriggers\cf4 \strokec4 () \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 ss\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Remove existing triggers to avoid duplicates\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 triggers\cf4 \strokec4  = \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 getUserTriggers\cf4 \strokec4 (\cf9 \strokec9 ss\cf4 \strokec4 );\cb1 \
\cb3   \cf9 \strokec9 triggers\cf4 \strokec4 .\cf9 \strokec9 forEach\cf4 \strokec4 (\cf9 \strokec9 trigger\cf4 \strokec4  => \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 deleteTrigger\cf4 \strokec4 (\cf9 \strokec9 trigger\cf4 \strokec4 ));\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Create new triggers\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 newTrigger\cf4 \strokec4 (\cf7 \strokec7 'onEdit'\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 forSpreadsheet\cf4 \strokec4 (\cf9 \strokec9 ss\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 onEdit\cf4 \strokec4 ()\cb1 \
\cb3     .\cf9 \strokec9 create\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3   \cf6 \strokec6 ScriptApp\cf4 \strokec4 .\cf9 \strokec9 newTrigger\cf4 \strokec4 (\cf7 \strokec7 'onDelete'\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 forSpreadsheet\cf4 \strokec4 (\cf9 \strokec9 ss\cf4 \strokec4 )\cb1 \
\cb3     .\cf9 \strokec9 onEdit\cf4 \strokec4 ()\cb1 \
\cb3     .\cf9 \strokec9 create\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3   \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActive\cf4 \strokec4 ().\cf9 \strokec9 toast\cf4 \strokec4 (\cf7 \strokec7 'Triggers successfully set up!'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Global function handlers\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 syncToFirebase\cf4 \strokec4 () \{\cb1 \
\cb3   \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 FirebaseSync\cf4 \strokec4 ().\cf9 \strokec9 syncData\cf4 \strokec4 ();\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Handler for PDF data sync\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 syncPdfDataToSheets\cf4 \strokec4 (\cf9 \strokec9 pdfData\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 processor\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 PdfDataProcessor\cf4 \strokec4 (\cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 getActiveSpreadsheet\cf4 \strokec4 ());\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rowsAdded\cf4 \strokec4  = \cf9 \strokec9 processor\cf4 \strokec4 .\cf9 \strokec9 processPdfData\cf4 \strokec4 (\cf9 \strokec9 pdfData\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \{\cb1 \
\cb3       \cf9 \strokec9 success\cf4 \strokec4 : \cf5 \strokec5 true\cf4 \strokec4 ,\cb1 \
\cb3       \cf9 \strokec9 rowsAdded\cf4 \strokec4 : \cf9 \strokec9 rowsAdded\cf4 \strokec4 ,\cb1 \
\cb3       \cf9 \strokec9 message\cf4 \strokec4 : \cf7 \strokec7 `Successfully added \cf4 \strokec4 $\{\cf9 \strokec9 rowsAdded\cf4 \strokec4 \}\cf7 \strokec7  rows to New Data sheet`\cf4 \cb1 \strokec4 \
\cb3     \};\cb1 \
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 error\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf7 \strokec7 'Error syncing PDF data:'\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \{\cb1 \
\cb3       \cf9 \strokec9 success\cf4 \strokec4 : \cf5 \strokec5 false\cf4 \strokec4 ,\cb1 \
\cb3       \cf9 \strokec9 error\cf4 \strokec4 : \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \cb1 \strokec4 \
\cb3     \};\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Error logging utility\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 logError\cf4 \strokec4 (\cf9 \strokec9 functionName\cf4 \strokec4 , \cf9 \strokec9 error\cf4 \strokec4 , \cf9 \strokec9 additionalInfo\cf4 \strokec4  = \{\}) \{\cb1 \
\cb3   \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 error\cf4 \strokec4 (\cf7 \strokec7 `Error in \cf4 \strokec4 $\{\cf9 \strokec9 functionName\cf4 \strokec4 \}\cf7 \strokec7 :`\cf4 \strokec4 , \{\cb1 \
\cb3     \cf9 \strokec9 message\cf4 \strokec4 : \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 ,\cb1 \
\cb3     \cf9 \strokec9 stack\cf4 \strokec4 : \cf9 \strokec9 error\cf4 \strokec4 .\cf9 \strokec9 stack\cf4 \strokec4 ,\cb1 \
\cb3     ...\cf9 \strokec9 additionalInfo\cf4 \cb1 \strokec4 \
\cb3   \});\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Debug logging utility\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 logDebug\cf4 \strokec4 (\cf9 \strokec9 message\cf4 \strokec4 , \cf9 \strokec9 data\cf4 \strokec4  = \cf5 \strokec5 null\cf4 \strokec4 ) \{\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 timestamp\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ().\cf9 \strokec9 toISOString\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 logMessage\cf4 \strokec4  = \cf9 \strokec9 data\cf4 \strokec4  ? \cb1 \
\cb3     \cf7 \strokec7 `[\cf4 \strokec4 $\{\cf9 \strokec9 timestamp\cf4 \strokec4 \}\cf7 \strokec7 ] \cf4 \strokec4 $\{\cf9 \strokec9 message\cf4 \strokec4 \}\cf7 \strokec7 : \cf4 \strokec4 $\{\cf6 \strokec6 JSON\cf4 \strokec4 .\cf9 \strokec9 stringify\cf4 \strokec4 (\cf9 \strokec9 data\cf4 \strokec4 )\}\cf7 \strokec7 `\cf4 \strokec4  : \cb1 \
\cb3     \cf7 \strokec7 `[\cf4 \strokec4 $\{\cf9 \strokec9 timestamp\cf4 \strokec4 \}\cf7 \strokec7 ] \cf4 \strokec4 $\{\cf9 \strokec9 message\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4 ;\cb1 \
\cb3   \cf9 \strokec9 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf9 \strokec9 logMessage\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
}